# Usage
#   Start:          docker compose -f ~/open-attribution/docker/docker-compose.yml up -d
#   Down:           docker compose down
#   Stop:           docker compose stop
#   Pull New:           docker compose pull
#   Destroy:        docker compose -f ~/open-attribution/docker/docker-compose.yml down -v --remove-orphans

#### SUPERSET #####
x-superset-image: &superset-image apachesuperset.docker.scarf.sh/apache/superset:3.1.0
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes:
  &superset-volumes # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./superset:/app/docker
  - superset_home:/app/superset_home
#### END SUPERSET #####

name: openattribution
version: '3.7'

services:
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.9.1
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper-volume:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - '9093:9093'
    volumes:
      - 'kafka-volume:/bitnami'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server:24.1.1
    # image: openattribution/clickhouse:main
    healthcheck:
      test: ['CMD-SHELL', 'clickhouse-client --query "SELECT 1"']
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      - kafka
    ports:
      - '9000:9000'
      - '8123:8123'
    volumes:
      - ${PWD}/sql/create/:/my-tables/
      - ${PWD}/sql/startup-scripts/:/docker-entrypoint-initdb.d/
      - 'clickhouse-volume:/var/lib/clickhouse'
      - 'clickhouse-log-volume:/var/log/clickhouse-server'
  api:
    container_name: api
    image: openattribution/python-api:main
    # build:
    # context: ../
    # dockerfile: docker/Dockerfile.python
    ports:
      - '8000:8000'
    depends_on:
      clickhouse:
        condition: service_healthy
  dash:
    container_name: dash
    image: openattribution/dash:main
    ports:
      - '3000:3000'
    depends_on:
      superset:

  #################
  ## SUPERSET
  #################
  #
  # Licensed to the Apache Software Foundation (ASF) under one or more
  # contributor license agreements.  See the NOTICE file distributed with
  # this work for additional information regarding copyright ownership.
  # The ASF licenses this file to You under the Apache License, Version 2.0
  # (the "License"); you may not use this file except in compliance with
  # the License.  You may obtain a copy of the License at
  #
  #    http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  # version: "3.7"
  # services:
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data

  db:
    env_file: ./superset/.env-non-dev
    image: postgres:15
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./superset/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  superset:
    env_file: ./superset/.env-non-dev
    image: *superset-image
    container_name: superset_app
    command: ['/app/docker/docker-bootstrap.sh', 'app-gunicorn']
    user: 'root'
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ['/app/docker/docker-init.sh']
    env_file: ./superset/.env-non-dev
    depends_on: *superset-depends-on
    user: 'root'
    volumes: *superset-volumes
    healthcheck:
      disable: true

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ['/app/docker/docker-bootstrap.sh', 'worker']
    env_file: ./superset/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: 'root'
    volumes: *superset-volumes
    healthcheck:
      test:
        ['CMD-SHELL', 'celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME']

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ['/app/docker/docker-bootstrap.sh', 'beat']
    env_file: ./superset/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: 'root'
    volumes: *superset-volumes
    healthcheck:
      disable: true

volumes:
  # Persist across stop/start, not down
  kafka-volume:
  zookeeper-volume:
  clickhouse-log-volume:
  clickhouse-volume:
  #### SUPERSET ####
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
  #### END SUPERSET ####
