########################################################
# DEMO SERVER USE ONLY
# DO NOT USE THIS IN PRODUCTION
# INSTEAD USE docker-compose.yml
# THIS VERSION MANAGES THE DEMO SERVER at demo.openattribution.dev
########################################################

name: openattribution-demo

services:
  kafka:
    image: docker.io/bitnami/kafka:3.9
    container_name: kafka
    ports:
      - '9093:9093'
    volumes:
      - 'kafka-volume:/bitnami'
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: ['CMD-SHELL', 'kafka-topics.sh --bootstrap-server localhost:9092 --list']
      interval: 10s
      timeout: 5s
      retries: 3

  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server:24.11.5
    healthcheck:
      test: ['CMD-SHELL', 'clickhouse-client --query "EXISTS daily_overview" || exit 1']
      interval: 5s
      timeout: 5s
      retries: 15
    depends_on:
      - kafka
    ports:
      - '9000:9000'
      - '8123:8123'
    env_file:
      - .production.env
    volumes:
      - ../apps/analytics-db/create/:/my-tables/
      - ../apps/analytics-db/startup-scripts/:/docker-entrypoint-initdb.d/
      - ../apps/analytics-db/config.xml:/etc/clickhouse-server/config.d/config.xml
      - 'clickhouse-volume:/var/lib/clickhouse'
      - 'clickhouse-log-volume:/var/log/clickhouse-server'

  postback-api:
    container_name: postback-api
    image: openattribution/python-api:main
    working_dir: /app
    command: litestar run --host 0.0.0.0 --port 8000
    ports:
      - '8000:8000'
    env_file:
      - .production.env
    depends_on:
      clickhouse:
        condition: service_healthy
    volumes:
      - 'postback-api-volume:/root/.config/geo-data'

  postback-test:
    container_name: postback-test
    build:
      context: ../apps/postback-api
      dockerfile: Dockerfile.test
    working_dir: /app
    command: bash -c "python run_data_generation.py -i && python run_data_generation.py"
    depends_on:
      - postback-api
    env_file:
      - .production.env
    environment:
      - TEST_HOST=${TEST_HOST:-http://demo.openattribution.dev}

  admin-db:
    container_name: admin-db
    image: postgres:17-bullseye
    restart: always
    env_file:
      - .production.env
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - 'pgdata-volume:/var/lib/postgresql/data'
      - '../apps/admin-db/pg-init.sql:/docker-entrypoint-initdb.d/init.sql'

  dash-backend:
    container_name: dash-backend
    image: openattribution/dash-backend:main
    ports:
      - '8001:8001'
    env_file:
      - .production.env
    command: litestar run --host 0.0.0.0 --port 8001
    working_dir: /app
    depends_on:
      clickhouse:
        condition: service_healthy
      admin-db:
        condition: service_started

  dash-frontend:
    container_name: dash-frontend
    image: openattribution/dash-frontend:main
    working_dir: /apps/dash-frontend
    command: 'node build'
    ports:
      - '5173:5173'
    depends_on:
      - 'dash-backend'

volumes:
  # Persist across stop/start, not down
  kafka-volume:
  clickhouse-log-volume:
  clickhouse-volume:
  pgdata-volume:
  postback-api-volume:
